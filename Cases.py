# Test cases for various Sloth Bytes challenges

# NDigits test cases - Count total digits used to write numbers from 1 to n-1
NDIGITS_TEST_CASES = [
    (10, 9),
    (100, 189),
    (2020, 6969),
    (8363058, 57430295),
    (6947630, 47522299),
    (9226586, 63474991),
    (373406, 2129325),
    (4999881, 33888056),
    (7809513, 53555480),
    (8201859, 56301902),
    (6190654, 42223467),
    (8091273, 55527800),
    (4132529, 27816592),
    (7760679, 53213642),
    (8229396, 56494661),
    (8610928, 59165385),
    (8811692, 60570733),
    (2311908, 15072245),
    (1821695, 11640754),
    (4344292, 29298933),
    (4431593, 29910040),
    (6730219, 46000422),
    (6430169, 43900072),
    (5601645, 38100404),
    (4584525, 30980564),
    (8410798, 57764475),
    (9408422, 64747843),
    (2456213, 16082380),
    (2671667, 17590558),
    (8366010, 57450959),
    (6307124, 43038757),
    (6564523, 44840550),
    (5838430, 39757899),
    (96817, 472974),
    (7071590, 48390019),
    (6942789, 47488412),
    (2666904, 17557217),
    (8997245, 61869604),
    (1270721, 7783936),
    (8649388, 59434605),
    (1540299, 9670982),
    (6908532, 47248613),
    (7023102, 48050603),
    (2532261, 16614716),
    (8443652, 57994453),
    (105259, 520443),
    (7728942, 52991483),
    (5349220, 36333429),
    (5109181, 34653156),
    (3605167, 24125058),
    (8646286, 59412891),
    (4649211, 31433366),
    (632337, 3682911),
    (4211259, 28367702),
    (4703113, 31810680),
    (4270748, 28784125),
    (634522, 3696021),
    (6529842, 44597783),
    (3292006, 21932931),
    (8647875, 59424014),
    (5839477, 39765228),
    (1669820, 10577629),
    (3664544, 24540697),
    (5290705, 35923824),
    (1284383, 7879570),
    (2548320, 16727129),
    (2937328, 19450185),
    (369491, 2105835),
    (7928155, 54385974),
    (4765380, 32246549),
    (2582883, 16969070),
    (1805721, 11528936),
    (6339615, 43266194),
    (7047160, 48219009),
    (537040, 3111129),
    (179060, 963249),
    (379796, 2167665),
    (2457507, 16091438),
    (2229010, 14491959),
    (2603664, 17114537),
    (9327213, 64179380),
    (4144223, 27898450),
    (6038702, 41159803),
    (4640278, 31370835),
    (9226349, 63473332),
    (603449, 3509583),
    (6672188, 45594205),
    (9780453, 67352060),
    (8851279, 60847842),
    (7776087, 53321498),
    (4071308, 27388045),
    (6175781, 42119356),
    (9870556, 67982781),
    (4372427, 29495878),
    (353474, 2009733),
    (5079431, 34444906),
    (6490885, 44325084),
    (2854989, 18873812),
    (6659507, 45505438),
    (8321175, 57137114)
]

# Spiral Matrix test cases - Convert 2D matrix to 1D array in spiral order
SPIRAL_MATRIX_TEST_CASES = [
    (
        [
          [ 1, 2, 3 ],
          [ 4, 5, 6 ],
          [ 7, 8, 9 ]
        ],
        [1, 2, 3, 6, 9, 8, 7, 4, 5]
    ),
    (
        [
          [1, 2, 3, 4],
          [5, 6, 7, 8],
          [9,10,11,12]
        ],
        [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
    ),
    (
        [
          [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
          [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
          [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
          [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
          [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100],
          [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120],
          [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140],
          [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
          [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
          [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]
        ],
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 161, 141, 121, 101, 81, 61, 41, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 59, 79, 99, 119, 139, 159, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 142, 122, 102, 82, 62, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 78, 98, 118, 138, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 123, 103, 83, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 97, 117, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 104, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105]
    ),
    (
        [[1,2,3,4,5,6,7,8,9,10]],
        [1,2,3,4,5,6,7,8,9,10]
    ),
    (
        [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]],
        [1,2,3,4,5,6,7,8,9,10]
    ),
    (
        [[1]],
        [1]
    ),
    (
        [],
        []
    )
]

# Birthday Cake Candles test cases - Count tallest candles
BIRTHDAY_CANDLES_TEST_CASES = [
    ([4, 4, 1, 3], 2),                # Two candles with height 4
    ([1, 1, 1, 1], 4),                # All candles same height
    ([], 0),                          # No candles
    ([5], 1),                         # Single candle
    ([1, 2, 3, 4, 5, 5, 5], 3),       # Three candles with max height 5
]

# Sticky Keys test cases - Check if typed string could result from long pressing
STICKY_KEYS_TEST_CASES = [
    (("alex", "aaleex"), True),       # Long press 'a' and 'e'
    (("saeed", "ssaaedd"), False),    # Wrong character 'd' at end
    (("leelee", "lleeelee"), True),   # Long press 'l' and 'e'
    (("Tokyo", "TTokkyoh"), False),   # Extra 'h' at end
    (("laiden", "laiden"), True),     # Exact match
    (("alex", "aleex"), True),        # Long press 'e'
    (("alex", "al"), False),          # Missing characters
    (("a", "aa"), True),              # Simple long press
    (("", ""), True),                 # Empty strings
]

# Happy Year test cases - Check if year has all unique digits
HAPPY_YEAR_TEST_CASES = [
    (2013, True),   # All digits unique
    (2014, True),   # All digits unique
    (1234, True),   # All digits unique
    (1223, False),  # Repeated digit '2'
    (9876, True),   # All digits unique
    (1000, False),  # Multiple repeated digits
    (987, True),    # 3-digit number with unique digits
    (10, True),     # 2-digit number with unique digits
    (11, False),    # Repeated digit '1'
    (1, True),      # Single digit
]

# Next Happy Year test cases - Find next happy year after given year
NEXT_HAPPY_TEST_CASES = [
    (2012, 2013),   # Next year is happy
    (2013, 2013),   # Already happy
    (1999, 2013),   # Skip many years to find next happy
    (9876, 9876),   # Already happy
    (1000, 1023),   # Find next happy after 1000
    (1, 1),         # Single digit is happy
    (10, 10),       # Already happy
    (99, 102),      # Next happy after 99
]

# Lemonade Stand test cases - Check if we can provide change
LEMONADE_TEST_CASES = [
    ([5, 5, 5, 10, 20], True),      # Can provide change
    ([5, 5, 10], True),             # Simple case
    ([10, 10], False),              # No $5 bills to give change
    ([5, 5, 10, 10, 20], False),    # Not enough $5 bills for $20
    ([5], True),                    # Single $5 bill
    ([20], False),                  # Can't change $20 without smaller bills
    ([5, 5, 5, 5, 20, 20, 20, 20, 20], False),  # Not enough change for multiple $20s
    ([5, 5, 5, 10, 5, 20, 5, 5, 5, 20], True),  # Complex valid case
    ([], True),                     # No customers
    ([5, 10, 5, 20, 5, 10], True),  # Mixed order
]

# Space Message test cases - Decode bracketed expressions
SPACE_MESSAGE_TEST_CASES = [
    ("[1000WOW]", "WOW" * 1000),           # Large multiplier
    ("IF[2E]LG[5O]D", "IFEELGOOOOOD"),     # Multiple brackets
    ("AB[3CD]", "ABCDCDCD"),               # Single bracket with multiple chars
    ("ABCD", "ABCD"),                      # No brackets
    ("", ""),                              # Empty string
    ("[1A]", "A"),                         # Single char, single repeat
    ("[0TEST]", ""),                       # Zero multiplier
    ("A[2B]C[3D]E", "ABBCDDDE"),           # Mixed brackets and chars
    ("[10X]", "XXXXXXXXXX"),               # Double digit multiplier
    ("START[2MID]END", "STARTMIDMIDEND"),  # Bracket in middle
]

JUMPGAME_TEST_CASES = [
    ([2,3,1,1,4], True),
    ([3,2,1,0,4], False),
    ([0],True),
    ([2,0,6,9,8,4,5,0,8,9,1,2,9,6,8,8,0,6,3,1,2,2,1,2,6,5,3,1,2,2,6,4,2,4,3,0,0,0,3,8,2,4,0,1,2,0,1,4,6,5,8,0,7,9,3,4,6,6,5,8,9,3,4,3,7,0,4,9,0,9,8,4,3,0,7,7,1,9,1,9,4,9,0,1,9,5,7,7,1,5,8,2,8,2,6,8,2,2,7,5,1,7,9,6],False)
]